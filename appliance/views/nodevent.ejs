var NoDevent = {};

function onReady(opts, fn) {
  if (NoDevent.connected) {
    fn();
    return;
  }
  
  function Room(name) {
    var m = new EventEmitter();
    m.name = name;
    return m;
  }

  var connect_url = opts.host + (opts.namespace || "");
  var s = io.connect(connect_url );
  var rooms = {};
  
  NoDevent.room = function(name) {
    var r = rooms[name];
    if (!r) {
      r = rooms[name] = new Room(name);
    }
    return r;
  };
  
  var join_callbacks = { };
  NoDevent.join = function(room, fn) {
    s.emit('join', {room : room});
    if (!join_callbacks[room]) {
      join_callbacks[room] = [fn];
    } else {
      var found = false;
      for(var i in join_callbacks[room]) {
        var callback = join_callbacks[room][i];
        found = found || (callback == fn);
      }
      if (!found) {
        join_callbacks[room].push(fn);
      }
    }
    fn(NoDevent.room(room));
  };
  
  NoDevent.leave = function(room) {
    join_callbacks[room] = [];
    s.emit('leave', {room : room});
  }; 

  NoDevent.socket = s;

  s.on('connect', function() {
         for (room in join_callbacks) {
           for(var i in join_callbacks[room]) {
             var callback = join_callbacks[room][i];
             callback(NoDevent.room(room));
           }
         }
       });
  s.on(
    'event', 
    function (data) {
      var event = data.event;
      var room = data.room;
      var message = data.message;
      
      NoDevent.room(room).emit(event, message);
    });
      
  NoDevent.connected = true;
  fn();
}

NoDevent.ready = function(fn) {
  var opts = <%- JSON.stringify(opts) %>;

  var socket_io_url = opts.host + "/socket.io/socket.io.js";
  var event_emitter_url = opts.host + "/EventEmitter.js";
  head.js(     
    socket_io_url, event_emitter_url,
    function() {onReady(opts, fn);});
};



      